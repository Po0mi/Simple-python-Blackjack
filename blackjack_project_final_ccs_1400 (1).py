# -*- coding: utf-8 -*-
"""Blackjack_project_final ccs 1400.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uAxDx4A7914dvwLUmv9QOZuiFZC9xxuA

A simple Blackjack game using oops, if statement, loops, etc
"""

# Define variables
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

import random
# Dealers name
Dealer = ('BOGART THE DESTROYER')

# Input name of the player
player_name = str(input('What is yor name? '))
# Classes 

# Create all cards
class Card(): 
    def __init__(self, suit, rank):
      self.suit = suit
      self.rank = rank
    
    def __str__(self):
      return f"{self.rank} of {self.suit}"

# Deck class to keep track of the cards and to be shuffled
class Deck():
  global suits, ranks

  def __init__(self):
    self.deck = [] # Initiate the empty deck
    for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit, rank))
  
  def shuffle(self): # Shuffles the deck
    random.shuffle(self.deck)

  def deal_one(self): # Removes the card at the top of the deck
    return self.deck.pop()

# Hand class to hold Card objects from the Deck class.
class Hand():
  global values
# Starting Hand has no cards, so Hand has no value
  def __init__(self): 
    self.cards = [] # start with an empty hand
    self.value = 0 # keep track of value of hand
    self.aces = 0 # keep track of aces

  def add_card(self, card): # Add a card to Hand 
    self.cards.append(card) # Add the card to the player's hand list
    self.value += values[card.rank] # Store the value of the card
    if card.rank == 'Ace': # Check for aces
       self.aces += 1
# If total value is greater than 21 and there is 1 or more aces still, Then change the value of the ace from 11 to 1
  def adjust_for_ace(self):  
    while self.value > 21 and self.aces > 0:
          self.value -= 10
          self.aces -= 1

# Chips and taking bets
class Chips():
    def __init__(self):
        # This can be set to a default value or supplied by user input
        self.total = 100
        self.bet = 0
        self.cheat = 900

    def win_bet(self):
        self.total = self.total + self.bet # Add chips if win

    def lose_bet(self):
        self.total = self.total - self.bet # Deduct chips if lose

    def cheats_active(self):
        self.total = self.cheat + self.total # use code to add cheats

chips = Chips()   

 # Cheat codes 
cheat = input('Cheats: ') 
if cheat == 'ccs1400': # Only used once
    chips.cheats_active()
    print(f'[Added chips!]')
else:     
    print('Wrong code!')

playing = True
game_on = True

while (game_on and playing):
    print('\nWELCOME TO BLACKJACK!')
    print(f'\nPLAYER: [{player_name}]')
    print(f'DEALER: [{Dealer}]\n')
    print(f'Amount of chips to bet: [{chips.total}] ')

    if cheat == 'ccs1400':
      print(f'CHEATER!')
  
    # first ask the Player to make a bet
    
    while True:
        try:
            chips.bet = int(input("How much would you like to bet? ")) # First ask the player how much are you gonna bet
        except:
            print("You must input an integer!") # If not an interger or number its invalid and will ask to try again
        else:
            if chips.bet > chips.total:
                print(f"Sorry, your bet can't exceed {chips.total} chips") # If the bet amount exceeds the total amount of chips
                continue
            elif chips.bet <= 0:
                print(f"Cannot be lower than 0")   
                continue
            print(f"You have successfully placed a bet of {chips.bet} chips!")
            break
    print(f'You now have: [{chips.total - chips.bet} chips]\n') # Shows how much remaining chips the player has
   
    
    # Setup Deck
    play_deck = Deck()
    play_deck.shuffle()

    # Setup Player and Dealer Hands
    player = Hand()
    dealer = Hand()
    
    i = 0
    while i < 2:
        player.add_card(play_deck.deal_one())
        dealer.add_card(play_deck.deal_one())         
        i += 1
   
    # Print out the dealers and players cards
    # Dealers hand
    print("DEALERS CARDS:") 
    print("<card hidden>")
    print(dealer.cards[0])
    # Players hand
    print("\nPLAYERS CARDS:") 
    print(f'{player.cards[0]}')
    print(f'{player.cards[1]}')
    print(f'Players hand value is: ({player.value})')
    
    # Player hits and gets another card
    hit_stay = True

    while hit_stay:
        choice = input("\nWould you like to hit or stay [h/s] :")
        choice = choice.lower()[0]
        if choice == 'h':        
            player.add_card(play_deck.deal_one()) # If player hit it adds one card to his/her hand
            print(f'\nPlAYERS CARDS:')
            print(f'{player.cards[0]}')
            print(f'{player.cards[1]}')
            print(f'{player.cards[2]}')
            print(f'Players hand value is: ({player.value})\n')
            hit_stay = False
        elif choice == 's': # If player stays cards ramains the same
            hit_stay = False
        else:
            print("That was not a choice. Please try again.") # If invalid input
            continue
    
  

    # dealer hit or stay
    if dealer.value < 17: # If the dealers hand is less than 17, the dealer hits which adds one card on his hand
          dealer.add_card(play_deck.deal_one())
          print("Dealer Hits!")
    else:
          print("Dealer Stays") # If not then the dealer stay
    # comparison
    print("\nDealer flips his last card") 
    if len(dealer.cards) == 2:
        print(f'DEALERS CARDS ARE: {dealer.cards[0]} & {dealer.cards[1]}') # If the stayed only two card are shown
    else:
        print(f'DEALERS CARDS:') # If the dealer hits it shows 3 cards
        print(f'{dealer.cards[0]}')
        print(f'{dealer.cards[1]}')
        print(f'{dealer.cards[2]}')
    
    # Winning or Losing
    print(f'Dealers hand value is : ({dealer.value})')
    if (player.value < 22) & ((player.value > dealer.value) or dealer.value > 21): 
        print("\nPlayer Wins!") # If the total value of the players card is less than 22 or greater than the dealer and the if the value of the dealers card is greater than 22, then the player wins
        chips.win_bet()
        print('(YOU WON CHIPS!)')
        print(f'You now have a total of [{chips.total}] chips.')
    elif player.value > 21: 
        print("\nPlayer Busts!") # If the total value of the players card is exceeds 22 then the player loss
        chips.lose_bet()
        print('(YOU LOSS CHIPS!)')
        print(f'You now have a total of [{chips.total}] chips.')
    elif player.value <= dealer.value & dealer.value < 22:
        print("\nHouse Wins") # If the total value of the players card is less than or equal to the dealer and if the total value of the dealers card less than 22 then the house wins
        chips.lose_bet()
        print('(YOU LOSS CHIPS!)')
        print(f'You now have a total of [{chips.total}] chips.')

    # Prompt the player to whether or not to play again
    new_game = input('\nDealer: Another round[y/n]? ') 
    while(not (new_game == 'y' or new_game == 'n')):
      new_game = input('\nInvalid input! valid input are [y/n]')
    if new_game.lower()=='y':
        playing = True
    elif new_game.lower() == 'n':
        print("\n遊んでくれてありがとう！")
        print("THANK YOU FOR PLAYING!")
        break

    # If the total amount of chips is less than or equal to zero then restart
    answer = new_game 
    if answer.lower() == 'y':
        if chips.total <= 0:
            print("\nOH NO YOUR OUT OF CHIPS, RESTART TO PLAY AGAIN!")
            break
        continue
    else:
        break

"""Cheat code is: ccs1400

"""